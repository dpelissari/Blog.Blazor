@page "/login/"

@using Blog.Blazor.Data
@using Blog.Blazor.Interfaces
@using Blog.Blazor.Models
@using Blog.Blazor.Services
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication

@inject AplicacaoDbContexto appDbContext
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container p-4">
    <div class="fixed-grid has-3-cols has-1-cols-mobile">
        <div class="grid">
            <div class="box cell is-col-start-2">
                <h1 class="title">Acessar painel</h1>
                <h2 class="subtitle mt-3">Para acessar o painel de administração informe suas credenciais.</h2>
                <EditForm OnValidSubmit="Autenticar" Model="usuario" FormName="login">
                    <DataAnnotationsValidator />
                    <div class="field">
                        <label class="label">E-mail</label>
                        <div class="control has-icons-left has-icons-right">
                            <InputText @bind-Value="usuario.Email" class="input mb-2" />
                            <span class="icon is-small is-left">
                                <FeatherMail Size="20" Color="#404040" />
                            </span>
                        </div>
                        <ValidationMessage For="@(() => usuario.Email)" />
                    </div>
                    <div class="field">
                        <label class="label">Senha</label>
                        <div class="control has-icons-left has-icons-right">
                            <InputText @bind-Value="usuario.Senha" type="password" class="input mb-2" />
                            <span class="icon is-small is-left">
                                <FeatherLock Size="20" Color="#404040" />
                            </span>
                        </div>
                        <ValidationMessage For="@(() => usuario.Senha)" />
                    </div>
                    <button type="submit" class="button is-light">Acessar</button>
                </EditForm>

                <PlaceHolder Visible="!string.IsNullOrEmpty(mensagemErro)">
                    <article class="message is-warning mt-4">
                        <div class="message-body">
                            <p>@mensagemErro</p>
                        </div>
                    </article>
                </PlaceHolder>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private UsuarioLogin usuario { get; set; } = new();

    private string? mensagemErro;

    private async Task Autenticar()
    {
        string senhaHash = await UsuarioService.HashSenhaAsync(usuario.Senha);

        var contaUsuario = appDbContext.Usuario.Where(x => x.Email == usuario.Email).FirstOrDefault();

        if (contaUsuario is null || contaUsuario.SenhaHash != senhaHash)
        {
            mensagemErro = "Suas credenciais estão incorretas. Por favor, verifique o e-mail ou a senha fornecidos.";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, usuario.Email),
            new Claim(ClaimTypes.Role, contaUsuario.Tipo.ToString())
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/int/posts");
    }
}