@page "/login/"

@using Blog.Blazor.Data
@using Blog.Blazor.Interfaces
@using Blog.Blazor.Models
@using Blog.Blazor.Services
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication

@inject AplicacaoDbContexto appDbContext
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="fixed-grid has-3-cols"
    <div class="grid">
          <div class="box">
        <h1 class="title">Acessar painel</h1>
        <h2 class="subtitle">Para acessar o painel de administração informe suas credenciais.</h2>
        <EditForm OnValidSubmit="Autenticar" Model="usuario" FormName="login">
            <DataAnnotationsValidator />
            <div class="field">
                <InputText @bind-Value="usuario.Email" class="input mb-2" />
                <ValidationMessage For="@(() => usuario.Email)" />
            </div>
            <div class="field">
                <InputText @bind-Value="usuario.Senha" type="password" class="input mb-2" />
                <ValidationMessage For="@(() => usuario.Senha)" />
            </div>
            <button type="submit" class="button is-primary">Login</button>
        </EditForm>
    </div>
    </div>
            <PlaceHolder Visible="!string.IsNullOrEmpty(mensagemErro)">
            <section class="hero is-medium is-warning">
                <div class="hero-body">
                    <FeatherAlertTriangle Color="#000" Size="100" />
                    <h1 class="title">@mensagemErro</h1>
                </div>
            </section>
        </PlaceHolder>
    </div>
</div>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private UsuarioLogin usuario { get; set; } = new();

    private string? mensagemErro;

    private async Task Autenticar()
    {

        string senhaHash = await UsuarioService.HashSenhaAsync(usuario.Senha);

        var contaUsuario = appDbContext.Usuario.Where(x => x.Email == usuario.Email).FirstOrDefault();


        if(contaUsuario is null || contaUsuario.SenhaHash != senhaHash)
        {
            mensagemErro = "E-mail ou senha invalidos";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, usuario.Email),
            new Claim(ClaimTypes.Role, contaUsuario.Tipo.ToString())
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/int/posts");
    }
}